// Core Metrics Plus Development Workflow

// Version Control
VERSION_CONTROL {
    BRANCH_NAMING {
        feature: "feat/*"
        bugfix: "fix/*"
        documentation: "docs/*"
        testing: "test/*"
        ci: "ci/*"
    }

    COMMIT_MESSAGES {
        // Using Conventional Commits
        feat: "New features"
        fix: "Bug fixes"
        docs: "Documentation changes"
        style: "Code style changes"
        refactor: "Code refactoring"
        test: "Test changes"
        ci: "CI/CD changes"
        chore: "Other changes"
    }

    PR_WORKFLOW {
        CREATE_BRANCH {
            command: "git checkout -b ${branch_type}/${branch_name}"
            example: "git checkout -b feat/new-feature"
        }

        MAKE_CHANGES {
            commit_format: "${type}: ${description}\n\n${details}"
            example: "feat: add new optimization feature\n\n- Add feature X\n- Update docs\n- Add tests"
        }

        CREATE_PR {
            command: "gh pr create --title '${commit_type}: ${description}' --body '${pr_body}'"
            template: """
                ## Changes
                ${bullet_points}

                ## Testing
                - [ ] Tests added/updated
                - [ ] Documentation updated
                - [ ] No breaking changes
            """
        }

        REVIEW_PROCESS {
            checks: [
                "GitHub Actions workflow passes",
                "Code review approved",
                "Documentation updated"
            ]
        }
    }
}

// Plugin Version Management
VERSIONING {
    format: "MAJOR.MINOR.PATCH"
    rules: {
        MAJOR: "Breaking changes"
        MINOR: "New features (feat:)"
        PATCH: "Bug fixes (fix:)"
    }
}

// Testing Requirements
TESTING {
    environments: [
        "PHP 8.0",
        "PHP 8.1",
        "WordPress latest",
        "WordPress 6.2"
    ]
    
    types: [
        "Syntax validation",
        "Basic smoke tests",
        "File integrity checks"
    ]
}

// Documentation Structure
DOCUMENTATION {
    required_files: [
        "README.md",
        "docs/PERFORMANCE.md",
        "docs/USER_STORIES.md"
    ]
    
    code_comments: {
        style: "PHPDoc",
        required_sections: [
            "@package",
            "@since",
            "@param (if applicable)",
            "@return (if applicable)"
        ]
    }
}

FUNCTION check_required_files():
  SET required_files TO:
    - docs/AI_ASSIST.md
    - core-metrics-plus.php
    - docs/CHANGELOG.md
  
  FOR EACH file IN required_files:
    IF NOT file_exists(file):
      THROW ERROR "Missing required file: {file}"
      RETURN false
  RETURN true

WHEN starting new AI session:
  TRY:
    AWAIT check_required_files()
  CATCH ERROR missing_file:
    TELL USER "Missing required file: {missing_file}"
    ASK USER "Would you like me to create this file?"
    IF user_agrees:
      CREATE file
    ELSE:
      WARN USER "Some features may be limited"

WHEN making git changes:
  TRY:
    FIRST AWAIT run_command("git status")
    SET changed_files TO get_changed_files()
    
    IF changed_files IS EMPTY:
      TELL USER "No changes detected"
      RETURN
    
    FOR EACH file IN changed_files:
      IF file needs_review:
        SHOW file_diff TO USER
        IF USER approves:
          AWAIT run_command("git add {file}")
        ELSE:
          SKIP file
    
    PREVENT ALWAYS:
      run_command("git add .")
  CATCH ERROR git_error:
    TELL USER "Git operation failed: {git_error}"

WHEN updating version:
  TRY:
    SET version_locations TO:
      - core-metrics-plus.php:header
      - core-metrics-plus.php:CMP_VERSION
      - docs/CHANGELOG.md
    
    # First check current version
    SET current_version TO get_version_from_file("core-metrics-plus.php")
    SET new_version TO increment_version(current_version)
    
    # Always confirm version change with user
    TELL USER "Current version is {current_version}"
    ASK USER "Confirm update to version {new_version}? This will modify multiple files."
    
    IF NOT user_confirms:
      TELL USER "Version update cancelled"
      RETURN
    
    # Update all version references
    FOR EACH location IN version_locations:
      IF file_exists(location):
        UPDATE_VERSION in location TO new_version
      ELSE:
        WARN USER "Could not update version in {location}: file not found"
    
    # Create release package
    CREATE_DIRECTORY "assets" IF NOT EXISTS
    SET package_name TO "core-metrics-plus-{new_version}.zip"
    CREATE_RELEASE_PACKAGE "assets/{package_name}"
  CATCH ERROR version_error:
    TELL USER "Version update failed: {version_error}"

WHEN creating commit:
  TRY:
    SET valid_types TO:
      - feat: "New features"
      - fix: "Bug fixes"
      - docs: "Documentation"
      - style: "Formatting"
      - refactor: "Code restructure"
      - test: "Testing"
      - chore: "Maintenance"
    
    REPEAT UNTIL valid_commit:
      ASK USER "What type of change is this?"
      SET type TO user_response
      
      IF type NOT IN valid_types:
        TELL USER "Invalid type. Please choose from: {valid_types}"
        CONTINUE
      
      ASK USER "Brief description:"
      SET description TO user_response
      
      ASK USER "Detailed points (empty line to finish):"
      SET details TO []
      REPEAT UNTIL line IS EMPTY:
        SET line TO user_response
        IF line NOT EMPTY:
          APPEND line TO details
      
      SHOW commit_preview TO USER
      IF USER approves:
        SET valid_commit TO true
    
    AWAIT run_command("git commit -m '{format_commit_message(type, description, details)}'")
  CATCH ERROR commit_error:
    TELL USER "Commit failed: {commit_error}"

WHEN creating release:
  TRY:
    FIRST verify_prerequisites():
      CHECK version_numbers_match()
      CHECK changelog_updated()
      CHECK tests_pass()
    
    IF ANY checks FAIL:
      TELL USER "Prerequisites not met: {failed_checks}"
      RETURN
    
    SET version TO get_current_version()
    
    ASYNC:
      CREATE zip_file:
        name: "assets/core-metrics-plus-{version}.zip"
        exclude:
          - ".*"
          - "__MACOSX"
      
      CREATE git_tag:
        name: "v{version}"
        message: "Version {version} release"
      
      AWAIT run_command("git push origin main --tags")
    
    TELL USER "Release v{version} created successfully"
  CATCH ERROR release_error:
    TELL USER "Release creation failed: {release_error}"
    TELL USER "Rolling back changes..."
    AWAIT rollback_release()
